---
# Source: voila/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: voila-service
  labels:
    app.kubernetes.io/name: voila
    helm.sh/chart: voila-0.2.10
    app.kubernetes.io/instance: voila
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - port: 8050
      targetPort: 8050
      name: dash
    - port: 8866
      targetPort: 8866
      protocol: TCP
      name: voila
    - port: 8888
      targetPort: 8888
      name: jupyter
  selector:
    app.kubernetes.io/name: voila
    app.kubernetes.io/instance: voila
---
# Source: voila/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: voila
  labels:
    app.kubernetes.io/name: voila
    helm.sh/chart: voila-0.2.10
    app.kubernetes.io/instance: voila
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: voila
      app.kubernetes.io/instance: voila
  template:
    metadata:
      labels:
        app.kubernetes.io/name: voila
        app.kubernetes.io/instance: voila
    spec: 
      affinity:
        nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                  - key: "kubernetes.io/hostname"
                    operator: In
                    values:
                      - knode2
                      - knode1
      imagePullSecrets:
        - name: regcred
      containers:
        - name: voila
          image: alvarogg777/arm64v8:jp46-ml-20220101
          imagePullPolicy: IfNotPresent
          command:
            - "voila"
          args:
            - "--enable_nbextensions=True"
            - "--Voila.ip=0.0.0.0"
            - "--port=8866"
            - "--no-browser"
            - "--base_url=/voila/"
          env:
            - name: TZ
              value: Europe/Madrid
            - name: MLFLOW_S3_IGNORE_TLS
              value: "true"
            - name: PGPASSWORD             
              valueFrom:        
                secretKeyRef:  
                  key: POSTGRES_PASSWORD  
                  name: storage-secrets   
            - name: PGUSER                 
              valueFrom:    
                secretKeyRef:  
                  key: POSTGRES_USER  
                  name: storage-secrets  
            - name: PGHOST                 
              valueFrom:    
                secretKeyRef:  
                  key: POSTGRES_HOST  
                  name: storage-secrets  
            - name: PGDATABASE             
              value: bentoml  
            - name: DEFAULT_ARTIFACT_ROOT
              value: s3://accuayto
            - name: MLFLOW_S3_ENDPOINT_URL
              valueFrom:
                secretKeyRef:
                  name: storage-secrets
                  key: MLFLOW_S3_ENDPOINT_URL
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: storage-secrets
                  key: MINIO_ACCESS_KEY
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: storage-secrets
                  key: MINIO_SECRET_KEY
          #livenessProbe:
          #  httpGet:
          #    path: /health
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /health
          #    port: http
          resources:
            {}
          # volumeMounts:
          #   - mountPath: "/export"
          #     name: minio
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: add-voila
spec:
  addPrefix:
    prefix: /voila
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: add-dash
spec:
  addPrefix:
    prefix: /dash
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: add-lab
spec:
  addPrefix:
    prefix: /lab
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: voila-ingress
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - match: Host(`voila.alboroto.live`) && PathPrefix(`/voila`)
      kind: Rule
      services:
        - name: voila-service
          port: 8866
      # middlewares:
      #   - name: add-voila
    - match: Host(`voila.alboroto.live`) && PathPrefix(`/dash`)
      kind: Rule
      services:
        - name: voila-service
          port: 8050
      # middlewares:
      #  - name: add-dash
    - match: Host(`jupyter.alboroto.live`)
      kind: Rule
      services:
        - name: voila-service
          port: 8888
      # middlewares:
      #  - name: add-lab
  tls:
    secretName: alboroto-tls
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: voila-ingress
# spec:
#   tls:
#   - hosts:
#       - voila.alboroto.live
#     secretName: alboroto-tls
#   rules:
#   - host: voila.alboroto.live
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: voila-service
#             port:
#               name: voila
#       - path: /dash
#         pathType: Prefix
#         backend:
#           service:
#             name: voila-service
#             port:
#               name: dash

# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: jupyter-ingress
# spec:
#   rules:
#   - host: jupyter.alboroto.live
#     http:
#       paths:
#       - path: /lab
#         pathType: Prefix
#         backend:
#           service:
#             name: voila-service
#             port:
#               number: 8888
#   #tls:
#   #  hosts:
#   #    - voila.alboroto.live
#   #  secretName: alboroto-tls
