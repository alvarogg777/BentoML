---
# Source: mlflow/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mlflow
  labels:
    app.kubernetes.io/name: mlflow
    helm.sh/chart: mlflow-1.4.0
    app.kubernetes.io/instance: mlflow
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 5000
      targetPort: http
      protocol: TCP
      name: http
    - port: 8888
      targetPort: jupyter
      name: jupyter
      protocol: TCP
    - port: 3000
      targetPort: yatai
      name: yatai
      protocol: TCP
    - port: 8050
      targetPort: web
      name: web
      protocol: TCP
  selector:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/instance: mlflow
---
# Source: mlflow/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow
  labels:
    app.kubernetes.io/name: mlflow
    helm.sh/chart: mlflow-1.4.0
    app.kubernetes.io/instance: mlflow
    app.kubernetes.io/managed-by: Helm
spec:
  progressDeadlineSeconds: 1200
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mlflow
      app.kubernetes.io/instance: mlflow
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/instance: mlflow
    spec: 
      imagePullSecrets:
        - name: regcred
      containers:
        - name: mlflow
          image: "alvarogg777/rapidsai:21.06-cuda11.2-runtime-ubuntu20.04-py3.8"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
            - name: jupyter
              containerPort: 8888
              protocol: TCP
            - name: yatai
              containerPort: 3000
              protocol: TCP
            - name: web
              containerPort: 8050
              protocol: TCP
          command:
            - "mlflow"
          args:
            - "server"
            - "--host=0.0.0.0"
            - "--backend-store-uri=postgresql://$(PGUSER):$(PGPASSWORD)@$(PGHOST):5432/mlflow"
            - "--default-artifact-root=$(DEFAULT_ARTIFACT_ROOT)"
          env:
            - name: TZ
              value: Europe/Madrid
            #- name: MLFLOW_S3_IGNORE_TLS
            #  value: "true"
            - name: PGPASSWORD             
              valueFrom:        
                  secretKeyRef:  
                    key: POSTGRES_PASSWORD  
                    name: storage-secrets   
            - name: PGUSER                 
              valueFrom:    
                  secretKeyRef:  
                    key: POSTGRES_USER  
                    name: storage-secrets  
            - name: PGHOST                 
              valueFrom:    
                  secretKeyRef:  
                    key: POSTGRES_HOST  
                    name: storage-secrets  
            - name: PGDATABASE             
              value: bentoml  
            - name: DEFAULT_ARTIFACT_ROOT
              value: s3://mlflow
            - name: MLFLOW_S3_ENDPOINT_URL
              valueFrom:
                secretKeyRef:
                  name: storage-secrets
                  key: S3_ENDPOINT_URL
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: MINIO_ACCESS_KEY
                  name: storage-secrets
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: MINIO_SECRET_KEY
                  name: storage-secrets
          #livenessProbe:
          #  httpGet:
          #    path: /health
          #    port: http
          #readinessProbe:
          #  httpGet:
          #    path: /health
          #    port: http
          resources:
            {}
          # volumeMounts:
          #   - mountPath: "/export"
          #     name: minio
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: mlflow-ingress
spec:
  entryPoints:
    - web
  routes:
    - match: Host(`mlflow.k3d.io`)
      kind: Rule
      services:
        - name: mlflow
          port: 5000

